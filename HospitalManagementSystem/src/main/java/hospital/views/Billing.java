/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospital.views;

import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ITACHI
 */
public class Billing extends javax.swing.JFrame {

    /**
     * Creates new form Billing
     */
    private static final Logger LOGGER = Logger.getLogger(Billing.class.getName());
    public Billing() {
        initComponents();
        loadPatients();
        loadServices();
        clearFields();
    }
    private void loadPatients() {
    try {
        Connection conn = hospital.db.ConnectDB.ConnectDB();
        String sql = "SELECT patient_id, patient_name FROM patients";
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            // You can also use a Map or custom class, but this is simple:
            cmbPatient.addItem(rs.getInt("patient_id") + " - " + rs.getString("patient_name"));
        }
    } catch (Exception e) {
        LOGGER.log(Level.SEVERE, "Error loading patients", e);
            JOptionPane.showMessageDialog(this, "Error loading patients: " + e.getMessage());
    }
}
    private void loadServices() {
        DefaultListModel<String> model = new DefaultListModel<>();
        try (Connection conn = hospital.db.ConnectDB.ConnectDB();
             PreparedStatement pst = conn.prepareStatement("SELECT service_id, service_name FROM services");
             ResultSet rs = pst.executeQuery()) {
            while (rs.next()) {
                model.addElement(rs.getInt("service_id") + " - " + rs.getString("service_name"));
            }
            lstServices.setModel(model);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error loading services", e);
            JOptionPane.showMessageDialog(this, "Error loading services: " + e.getMessage());
        }
    }
    private void loadAssignedServices(int patientID) {
    try (Connection conn = hospital.db.ConnectDB.ConnectDB()) {
        // Query for table data
        try (PreparedStatement pst = conn.prepareStatement(
             "SELECT s.service_name AS [Service], s.service_charge AS [Charge], b.date_given AS [Date] " +
             "FROM billing b JOIN services s ON b.service_id = s.service_id WHERE b.patient_id = ?")) {
            pst.setInt(1, patientID);
            try (ResultSet rs = pst.executeQuery()) {
                tblAssigned.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            }
        }

        // Separate query for total
        try (PreparedStatement pstTotal = conn.prepareStatement(
             "SELECT SUM(s.service_charge) AS TotalCharge " +
             "FROM billing b JOIN services s ON b.service_id = s.service_id WHERE b.patient_id = ?")) {
            pstTotal.setInt(1, patientID);
            try (ResultSet rsTotal = pstTotal.executeQuery()) {
                BigDecimal total = BigDecimal.ZERO;
                if (rsTotal.next() && rsTotal.getBigDecimal("TotalCharge") != null) {
                    total = rsTotal.getBigDecimal("TotalCharge");
                }
                txtTotal.setText(total.toPlainString());
            }
        }
    } catch (Exception e) {
        LOGGER.log(Level.SEVERE, "Error loading assigned services", e);
        JOptionPane.showMessageDialog(this, "Error loading assigned services: " + e.getMessage());
    }
}
    
    private void clearFields() {
    cmbPatient.setSelectedIndex(-1);
    lstServices.clearSelection();
    txtTotal.setText("");
    tblAssigned.setModel(new DefaultTableModel());
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbPatient = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAssigned = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstServices = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnAssign = new javax.swing.JButton();
        btnGenerateBill = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));

        jLabel1.setText("Patient Selector");

        cmbPatient.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPatientItemStateChanged(evt);
            }
        });
        cmbPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPatientActionPerformed(evt);
            }
        });

        jLabel2.setText("Assigned Services List");

        jLabel3.setText("Service Selector");

        tblAssigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblAssigned);

        jScrollPane2.setViewportView(lstServices);

        jLabel4.setText("Total Amount:");

        btnAssign.setText("Assign/Add");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnGenerateBill.setText("Generate Bill");
        btnGenerateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(39, 39, 39))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbPatient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotal))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(btnAssign)
                .addGap(71, 71, 71)
                .addComponent(btnGenerateBill)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssign)
                    .addComponent(btnGenerateBill))
                .addGap(17, 17, 17))
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("BILLING DETAILS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        
    String patientStr = (String) cmbPatient.getSelectedItem();
        String serviceStr = lstServices.getSelectedValue();

        if (patientStr == null || serviceStr == null) {
            JOptionPane.showMessageDialog(this, "Select both patient and service.");
            return;
        }

        try {
            int patientID = Integer.parseInt(patientStr.split(" - ")[0]);
            int serviceID = Integer.parseInt(serviceStr.split(" - ")[0]);

            try (Connection conn = hospital.db.ConnectDB.ConnectDB();
                 PreparedStatement pst = conn.prepareStatement(
                     "INSERT INTO billing (patient_id, service_id, date_given) VALUES (?, ?, ?)")) {
                pst.setInt(1, patientID);
                pst.setInt(2, serviceID);
                pst.setTimestamp(3, Timestamp.valueOf(LocalDateTime.now()));
                pst.executeUpdate();

                JOptionPane.showMessageDialog(this, "Service assigned.");
                loadAssignedServices(patientID);
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error assigning service", e);
            JOptionPane.showMessageDialog(this, "Error assigning service: " + e.getMessage());
        }
            // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignActionPerformed

    private void cmbPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPatientActionPerformed
    /*    
    if (evt.getStateChange() != ItemEvent.SELECTED) {
    } else {
        String selected = (String) cmbPatient.getSelectedItem();
        if (selected != null) {
            int patientID = Integer.parseInt(selected.split(" - ")[0]);
            loadAssignedServices(patientID);
        }
    }*/
       // TODO add your handling code here:
    }//GEN-LAST:event_cmbPatientActionPerformed

    private void cmbPatientItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPatientItemStateChanged
       if (evt.getStateChange() == ItemEvent.SELECTED) {
            String selected = (String) evt.getItem();
            if (selected != null) {
                try {
                    int patientID = Integer.parseInt(selected.split(" - ")[0]);
                    loadAssignedServices(patientID);
                } catch (NumberFormatException e) {
                    LOGGER.log(Level.WARNING, "Invalid patient ID format", e);
                }
            }
        }
    
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPatientItemStateChanged

    private void btnGenerateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateBillActionPerformed
        String patientStr = (String) cmbPatient.getSelectedItem();
        if (patientStr == null) {
            JOptionPane.showMessageDialog(this, "Select a patient first.");
            return;
        }

        try {
            int patientID = Integer.parseInt(patientStr.split(" - ")[0]);
            // Placeholder for bill generation logic (e.g., create PDF, save to DB, etc.)
            JOptionPane.showMessageDialog(this, "Bill generated for patient ID: " + patientID);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error generating bill", e);
            JOptionPane.showMessageDialog(this, "Error generating bill: " + e.getMessage());
        }
    
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGenerateBillActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            LOGGER.log(Level.SEVERE, "Failed to set Nimbus look and feel", ex);
        }

        java.awt.EventQueue.invokeLater(() -> new Billing().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnGenerateBill;
    private javax.swing.JComboBox<String> cmbPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstServices;
    private javax.swing.JTable tblAssigned;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

}
